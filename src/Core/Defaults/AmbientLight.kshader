Shader "Default/AmbientLight"

Properties
{
	_MatView("view matrix", MATRIX_4X4)
	_MatViewInverse("inverse view matrix", MATRIX_4X4)
	_SkyColor("sky color", FLOAT4)
	_GroundColor("ground color", FLOAT4)
	_SkyIntensity("sky intensity", FLOAT)
	_GroundIntensity("ground intensity", FLOAT)
	_GAlbedoAO("g albedo & roughness", TEXTURE_2D)
	_GNormalMetallic("g normal and metallness", TEXTURE_2D)
	_GPositionRoughness("g depth", TEXTURE_2D)
}

Pass 0
{
	DepthTest Off
	DepthWrite Off
	// DepthMode Less
	Blend On
	BlendSrc SrcAlpha
	BlendDst One
	BlendMode Add
	Cull Off
	// Winding CW

	Vertex
	{
		in vec3 vertexPosition;
		in vec2 vertexTexCoord;
		
		out vec2 TexCoords;

		void main() 
		{
			gl_Position = vec4(vertexPosition, 1.0);
			TexCoords = vertexTexCoord;
		}
	}

	Fragment
	{
		layout(location = 0) out vec4 gLighting;
		
		uniform mat4 _MatView;
		uniform mat4 _MatViewInverse;
		
		in vec2 TexCoords;
		
		uniform vec4 _SkyColor;
		uniform vec4 _GroundColor;
		uniform float _SkyIntensity;
		uniform float _GroundIntensity;
		
		uniform sampler2D _GAlbedoAO;			// Albedo (r,g,b) & Ambient Occlusion (a)
		uniform sampler2D _GNormalMetallic;		// Normal (r,g,b) & Metalness (a)
		uniform sampler2D _GPositionRoughness;	// Position (r,g,b) & Roughness (a)
		
		void main()
		{
			// Test the view-space position for valid data.
			// If invalid (e.g. skybox, post-processing effects), discard the fragment.
			vec3 viewSpacePos = textureLod(_GPositionRoughness, TexCoords, 0).xyz;
			if(viewSpacePos == vec3(0, 0, 0))
				discard;

			// Get view-space normal in [0, 1] range.
			// The normal is relative to the rendering camera:
			// (0, 0, 1) is directly away from the camera,
			// (0, 0, -1) is directly towards the camera,
			// (1, 0, 0) is to the right of the camera,
			// (0, 1, 0) is up from the camera.
			vec3 normal = textureLod(_GNormalMetallic, TexCoords, 0).xyz;
			
			// Get albedo color in [0, 1] range
			vec3 albedo = textureLod(_GAlbedoAO, TexCoords, 0).rgb;
			
			// We could either transform the normal from view-space to world-space,
			// or the world-space up vector to view-space. I chose the latter.
			vec3 worldUp = vec3(0.0, 1.0, 0.0);
			vec3 localUp = (_MatView * vec4(worldUp, 0.0)).xyz;
			
			// Calculate the hemisphere lighting based on the world-space normal.
			// The hemisphere lighting is a simple approximation of ambient lighting.
			// The sky color is used for the top hemisphere, and the ground color is used for the bottom hemisphere.
			float hemisphere = dot(normal, localUp);
			vec3 groundColor = _GroundColor.rgb * _GroundIntensity;
			vec3 skyColor = _SkyColor.rgb * _SkyIntensity;
			vec3 hemisphereColor = mix(groundColor, skyColor, hemisphere);
			
			// Apply hemisphere color to the albedo color.
			vec3 finalColor = albedo * hemisphereColor;
			
			gLighting = vec4(finalColor, 1.0);
		}
	}
}