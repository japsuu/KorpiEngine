<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHelpers.tt" #>
// AUTOGENERATED FILE: Do not edit directly, instead edit Structs.tt

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace KorpiEngine.Mathematics
{
<#
    CreateVectorStruct("Vector2", [ "X", "Y" ], "float");
    CreateVectorStruct("Vector3", [ "X", "Y", "Z" ], "float");
    CreateVectorStruct("Vector4", [ "X", "Y", "Z", "W" ], "float");

    CreateVectorStruct("DVector2", [ "X", "Y" ], "double");
    CreateVectorStruct("DVector3", [ "X", "Y", "Z" ], "double");
    CreateVectorStruct("DVector4", [ "X", "Y", "Z", "W" ], "double");

    CreateVectorStruct("Complex", [ "Real", "Imaginary" ], "double");

    CreateStruct("Plane", [ "Normal", "D" ], [ "Vector3", "float" ]);
    CreateStruct("DPlane", [ "Normal", "D" ], [ "DVector3", "double" ]);

    CreateStruct("Quaternion", [ "X", "Y", "Z", "W" ], [ "float", "float", "float", "float" ]);
    CreateStruct("DQuaternion", [ "X", "Y", "Z", "W" ], [ "double", "double", "double", "double" ]);

    // Various types of intervals (and bounding structs)
    CreateIntervalStruct("Interval", "float");
    CreateIntervalStruct("AABox2D", "Vector2");
    CreateIntervalStruct("AABox", "Vector3");
    CreateIntervalStruct("AABox4D", "Vector4");

    CreateIntervalStruct("DInterval", "double");
    CreateIntervalStruct("DAABox2D", "DVector2");
    CreateIntervalStruct("DAABox", "DVector3");
    CreateIntervalStruct("DAABox4D", "DVector4");

    // These are common structs
    CreateStruct("Ray", [ "Position", "Direction" ], [ "Vector3", "Vector3" ]);
    CreateStruct("DRay", [ "Position", "Direction" ], [ "DVector3", "DVector3" ]);
    CreateStruct("Sphere", [ "Center", "Radius" ], [ "Vector3", "float" ]);
    CreateStruct("DSphere", [ "Center", "Radius" ], [ "DVector3", "double" ]);
    CreateStruct("TransformData", [ "Position", "Orientation", "Scale" ], [ "Vector3", "Quaternion", "Vector3" ]);

    // These have surface areas and midpoints and bounding boxes
    CreateShapeStruct("Line", [ "A", "B" ], "Vector3");
    CreateShapeStruct("Line2D", [ "A", "B" ], "Vector2");
    CreateShapeStruct("Triangle", [ "A", "B", "C" ], "Vector3");
    CreateShapeStruct("Triangle2D", [ "A", "B", "C" ], "Vector2");
    CreateShapeStruct("Quad", [ "A", "B", "C", "D" ], "Vector3");
    CreateShapeStruct("Quad2D", [ "A", "B", "C", "D" ], "Vector2");

    CreateVectorStruct("Int2", [ "X", "Y" ], "int");
    CreateVectorStruct("Int3", [ "X", "Y", "Z" ], "int");
    CreateVectorStruct("Int4", [ "X", "Y", "Z", "W" ], "int");

    CreateStruct("Byte2", [ "X", "Y" ], [ "byte", "byte" ]);
    CreateStruct("Byte3", [ "X", "Y", "Z" ], [ "byte", "byte", "byte" ]);
    CreateStruct("Byte4", [ "X", "Y", "Z", "W" ], [ "byte", "byte", "byte", "byte" ]);

    CreateStruct("ColorRGB", [ "R", "G", "B" ], [ "byte", "byte", "byte" ]);
    CreateStruct("ColorRGBA", [ "R", "G", "B", "A" ], [ "byte", "byte", "byte", "byte" ]);
    CreateStruct("ColorHDR", [ "R", "G", "B", "A" ], [ "float", "float", "float", "float"]);

    CreateStruct("SphericalCoordinate", [ "Radius", "Azimuth", "Inclination" ], [ "double", "double", "double" ]);
    CreateStruct("PolarCoordinate", [ "Radius", "Azimuth" ], [ "double", "double" ]);
    CreateStruct("LogPolarCoordinate", [ "Rho", "Azimuth" ], [ "double", "double" ]);
    CreateStruct("CylindricalCoordinate", [ "Radius", "Azimuth", "Height" ], [ "double", "double", "double" ]);
    CreateVectorStruct("HorizontalCoordinate", [ "Azimuth", "Inclination" ], "double");
    CreateVectorStruct("GeoCoordinate", [ "Latitude", "Longitude" ], "double");

    CreateStruct("AxisAngle", [ "Axis", "Angle" ], [ "DVector3", "double" ]);
    CreateVectorStruct("Euler", [ "Yaw", "Pitch", "Roll" ], "float");
#>
}
